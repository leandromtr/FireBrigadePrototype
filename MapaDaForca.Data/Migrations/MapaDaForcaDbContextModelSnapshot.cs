// <auto-generated />
using System;
using MapaDaForca.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MapaDaForca.Data.Migrations
{
    [DbContext(typeof(MapaDaForcaDbContext))]
    partial class MapaDaForcaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MapaDaForca.Model.Batalhao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Batalhoes");
                });

            modelBuilder.Entity("MapaDaForca.Model.Bombeiro", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DtInicio");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nome");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("NumeroMecanografico");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<Guid>("PostoId");

                    b.Property<Guid>("QuartelId");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Turno");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "1821ccc9-f5a2-4fcf-add0-86d75d5ad5dd", AccessFailedCount = 0, ConcurrencyStamp = "d279c4ba-1a64-4131-8d12-7c00bc681b28", DtInicio = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "admin@gmail.com", EmailConfirmed = true, LockoutEnabled = false, Nome = "Admin", NormalizedEmail = "ADMIN@GMAIL.COM", NormalizedUserName = "ADMIN@GMAIL.COM", NumeroMecanografico = 0, PasswordHash = "AQAAAAEAACcQAAAAEKRRvOn4a/zVGAsKDbzKMYfXT4wZrQcfRcrkYvD+lMQTc4lvJ1/bW8d2nAW+PR+d5Q==", PhoneNumberConfirmed = false, PostoId = new Guid("00000000-0000-0000-0000-000000000000"), QuartelId = new Guid("00000000-0000-0000-0000-000000000000"), SecurityStamp = "209d27c0-b112-4267-873b-2d814afacf2a", Turno = 1, TwoFactorEnabled = false, UserName = "admin@gmail.com" },
                        new { Id = "42025ddf-5721-4066-abc3-f813480f3c1f", AccessFailedCount = 0, ConcurrencyStamp = "e4a7638f-13b8-431f-800e-5c6693410e86", DtInicio = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "bombeiro@gmail.com", EmailConfirmed = true, LockoutEnabled = false, Nome = "Bombeiro0", NormalizedEmail = "BOMBEIRO@GMAIL.COM", NormalizedUserName = "BOMBEIRO@GMAIL.COM", NumeroMecanografico = 0, PasswordHash = "AQAAAAEAACcQAAAAEPYMdnRntK5mrxTEIupg/db1aJhpjrjUAGxbLSVWBFrTxPbeNT/xL8ArQdy3K+ES/w==", PhoneNumberConfirmed = false, PostoId = new Guid("00000000-0000-0000-0000-000000000000"), QuartelId = new Guid("00000000-0000-0000-0000-000000000000"), SecurityStamp = "b7ed0c5c-3337-4f91-ae3d-0bda2722b539", Turno = 1, TwoFactorEnabled = false, UserName = "bombeiro@gmail.com" }
                    );
                });

            modelBuilder.Entity("MapaDaForca.Model.BombeiroFuncao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BombeiroId");

                    b.Property<Guid>("FuncaoId");

                    b.Property<bool>("FuncaoPrincipal");

                    b.HasKey("Id");

                    b.ToTable("BombeiroFuncoes");
                });

            modelBuilder.Entity("MapaDaForca.Model.Companhia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BatalhaoId");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Companhias");
                });

            modelBuilder.Entity("MapaDaForca.Model.Escala", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AprovadoEm");

                    b.Property<Guid>("AprovadoPor");

                    b.Property<Guid>("BombeiroId");

                    b.Property<DateTime>("DtEscala");

                    b.Property<Guid>("EscalaTipoId");

                    b.Property<Guid>("FuncaoId");

                    b.Property<bool>("PeriodoDiurno");

                    b.Property<int>("PrioridadeFerias");

                    b.Property<Guid>("QuartelId");

                    b.HasKey("Id");

                    b.ToTable("Escalas");
                });

            modelBuilder.Entity("MapaDaForca.Model.EscalaTipo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<int>("EscalaTipoDetalhe");

                    b.HasKey("Id");

                    b.ToTable("EscalaTipos");
                });

            modelBuilder.Entity("MapaDaForca.Model.EscalaTurno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DtEscalaTurno");

                    b.Property<bool>("PeriodoDiurno");

                    b.Property<int>("Turno");

                    b.HasKey("Id");

                    b.ToTable("EscalaTurnos");
                });

            modelBuilder.Entity("MapaDaForca.Model.Funcao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Funcoes");
                });

            modelBuilder.Entity("MapaDaForca.Model.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BatalhaoId");

                    b.Property<DateTime>("DtLog");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("MapaDaForca.Model.Posto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Postos");
                });

            modelBuilder.Entity("MapaDaForca.Model.Quartel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanhiaId");

                    b.Property<string>("Nome");

                    b.Property<bool>("Portao");

                    b.HasKey("Id");

                    b.ToTable("Quarteis");
                });

            modelBuilder.Entity("MapaDaForca.Model.QuartelViatura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("QuartelId");

                    b.Property<Guid>("ViaturaId");

                    b.HasKey("Id");

                    b.ToTable("QuartelViaturas");
                });

            modelBuilder.Entity("MapaDaForca.Model.QuartelViaturaCondicao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("QuartelViaturaId");

                    b.Property<Guid>("ViaturaId");

                    b.HasKey("Id");

                    b.ToTable("QuartelViaturaCondicoes");
                });

            modelBuilder.Entity("MapaDaForca.Model.Viatura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodigoRSB");

                    b.Property<string>("Matricula");

                    b.Property<bool>("Operacional");

                    b.Property<Guid>("ViaturaTipoId");

                    b.HasKey("Id");

                    b.ToTable("Viaturas");
                });

            modelBuilder.Entity("MapaDaForca.Model.ViaturaTipo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("Sigla");

                    b.HasKey("Id");

                    b.ToTable("ViaturaTipos");
                });

            modelBuilder.Entity("MapaDaForca.Model.ViaturaTipoFuncao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FuncaoId");

                    b.Property<int>("Quantidade");

                    b.Property<Guid>("ViaturaTipoId");

                    b.HasKey("Id");

                    b.ToTable("ViaturaTipoFuncoes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "3bc055c0-4c43-458f-97b4-699295bd52cb", ConcurrencyStamp = "d725c4dd-e718-4f5e-8cd7-d4466fa11b67", Name = "Administrador", NormalizedName = "ADMINISTRADOR" },
                        new { Id = "19a1f2bd-28f2-4b6e-ae1f-859d6fc1f761", ConcurrencyStamp = "db8a76e9-b70b-4255-affb-b90fb953fa2a", Name = "Bombeiro", NormalizedName = "BOMBEIRO" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "1821ccc9-f5a2-4fcf-add0-86d75d5ad5dd", RoleId = "3bc055c0-4c43-458f-97b4-699295bd52cb" },
                        new { UserId = "42025ddf-5721-4066-abc3-f813480f3c1f", RoleId = "19a1f2bd-28f2-4b6e-ae1f-859d6fc1f761" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MapaDaForca.Model.Bombeiro")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MapaDaForca.Model.Bombeiro")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MapaDaForca.Model.Bombeiro")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MapaDaForca.Model.Bombeiro")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
